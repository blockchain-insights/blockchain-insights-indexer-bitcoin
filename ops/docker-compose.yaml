version: '3.8'

services:
  bitcoin-core:
    image: ruimarinho/bitcoin-core:latest
    command:
      -rpcuser=${RPC_USER}
      -rpcpassword=${RPC_PASSWORD}
      -rpcallowip=${RPC_ALLOW_IP:-172.16.0.0/12}
      -rpcbind=${RPC_BIND:-0.0.0.0}
      -maxconnections=${MAX_CONNECTIONS:-512}
      -printtoconsole
      -rpcworkqueue=4086
      -server=1
      -txindex=1
    expose:
      - "8332:8332"
      - "8333:8333"
    volumes:
      - bitcoin-data:/home/bitcoin/.bitcoin
    restart: unless-stopped

  memgraph:
    image: memgraph/memgraph-mage:1.21-memgraph-2.21
    ports:
      - "7687:7687"
      - "7444:7444"
    environment:
      - MEMGRAPH_USER=${GRAPH_DB_USER}
      - MEMGRAPH_PASSWORD=${GRAPH_DB_PASSWORD}
    command: ["--storage-parallel-schema-recovery=true", "--storage-properties-on-edges=true", "--storage-recovery-thread-count=60", "--storage-gc-cycle-sec=300", "--log-level=TRACE", "--also-log-to-stderr", "--storage-snapshot-on-exit=false", "--storage-snapshot-interval-sec=14400", "--storage-snapshot-retention-count=2", "--storage-wal-enabled=true", "--isolation-level=READ_COMMITTED", "--replication-restore-state-on-startup=true", "--query-execution-timeout-sec=0"]
    volumes:
      - bitcoin-memgraph-data:/var/lib/memgraph
      - bitcoin-memgraph-log:/var/log/memgraph
      - bitcoin-memgraph-etc:/etc/memgraph
    restart: unless-stopped

  memgraph-archive:
    image: memgraph/memgraph-mage:1.21-memgraph-2.21
    ports:
      - "7688:7687"
      - "7445:7444"
    environment:
      - MEMGRAPH_USER=${GRAPH_DB_USER}
      - MEMGRAPH_PASSWORD=${GRAPH_DB_PASSWORD}
    command: ["--storage-mode=ON_DISK_TRANSACTIONAL", "--storage-parallel-schema-recovery=true", "--storage-properties-on-edges=true", "--storage-recovery-thread-count=60",  "--log-level=TRACE", "--also-log-to-stderr",  "--query-execution-timeout-sec=0" ]
    volumes:
      - bitcoin-memgraph-archive-data:/var/lib/memgraph
      - bitcoin-memgraph-archive-log:/var/log/memgraph
      - bitcoin-memgraph-archive-etc:/etc/memgraph
    restart: unless-stopped


  memgraph-lab:
    image: memgraph/lab:latest
    container_name: memgraph-lab
    ports:
      - "3000:3000"
    depends_on:
      - memgraph
    environment:
      - QUICK_CONNECT_MG_HOST=memgraph
      - QUICK_CONNECT_MG_PORT=7687


  postgres:
    image: timescale/timescaledb:latest-pg16
    expose:
      - "5432:5432"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data-miner:/var/lib/postgresql/data
      - "./init.sql:/docker-entrypoint-initdb.d/init.sql"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-miner}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeit456$}

  redpanda-postgres:
    image: postgres:16-alpine
    expose:
      - "5420:5432"
    ports:
      - "5420:5432"
    volumes:
      - postgres-data-indexer:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${REDPANDA_POSTGRES_DB:-redpanda}
      - POSTGRES_USER=${REDPANDA_POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${REDPANDA_POSTGRES_PASSWORD:-changeit456$}

  redpanda:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.11
    container_name: redpanda-0
    volumes:
      - redpanda-data-indexer:/var/lib/redpanda/data
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644

  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
          kafka:
            brokers: ["redpanda:9092"]
            schemaRegistry:
              enabled: true
              urls: ["http://redpanda:8081"]
          redpanda:
            adminApi:
              enabled: true
              urls: ["http://redpanda:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda

    
volumes:
  bitcoin-data:
    name: bitcoin-data
  bitcoin-memgraph-data:
    name: bitcoin-memgraph-data
  bitcoin-memgraph-log:
    name: bitcoin-memgraph-log
  bitcoin-memgraph-etc:
    name: bitcoin-memgraph-etc
  bitcoin-memgraph-archive-data:
    name: bitcoin-memgraph-archive-data
  bitcoin-memgraph-archive-log:
    name: bitcoin-memgraph-archive-log
  bitcoin-memgraph-archive-etc:
    name: bitcoin-memgraph-archive-etc
  postgres-data-miner:
    name: "postgres-data-miner"
  postgres-data-indexer:
    name: "postgres-data-indexer"
  redpanda-data-indexer:
    name: "redpanda-data-indexer"